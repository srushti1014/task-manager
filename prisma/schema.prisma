// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  categories    Category[]
  tags          Tag[]
}

model Category {
  id     String @id @default(cuid())
  name   String @unique
  color  String @default("#3B82F6")
  userId String
  createdAt DateTime   @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@unique([name, userId])
}

model Tag {
  id     String @id @default(cuid())
  name   String @unique
  color  String @default("#10B981")
  createdAt DateTime   @default(now())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tasks TaskTag[]

  @@unique([name, userId])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  priority    Priority    @default(MEDIUM)
  status      Status    @default(PENDING)
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  tags TaskTag[]
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String
  createdAt DateTime   @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model User {
//   id            String     @id @default(uuid())
//   name          String?
//   email         String?    @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   tasks         Task[]
//   categories    Category[]
//   tags          Tag[]
// }

// model Task {
//   id          String    @id @default(uuid())
//   title       String
//   description String?
//   dueDate     DateTime?
//   priority    String
//   status      Status    @default(PENDING)
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   // Relations
//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   categoryId String?
//   category   Category? @relation(fields: [categoryId], references: [id])

//   tags Tag[]
// }

// model Category {
//   id     String @id @default(cuid())
//   name   String @unique
//   color  String @default("#3B82F6")
//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   tasks Task[]

//   @@unique([name, userId])
// }

// model Tag {
//   id     String @id @default(cuid())
//   name   String @unique
//   color  String @default("#10B981")
//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   tasks Task[]

//   @@unique([name, userId])
// }

// enum Status {
//   PENDING
//   IN_PROGRESS
//   COMPLETED
// }
